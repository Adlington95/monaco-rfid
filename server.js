const express = require('express')
const pool = require('./db')
const cors = require('cors')
const fetch = require('node-fetch')

const port = 3000
const rfidAddress = '169.254.39.234'
const webUsername = 'admin'
const webPassword = 'Z3braT3ch*1'

const app = express()
app.use(express.json())
app.use(cors())


// Naughty line needed as I can't be bothered with SSL 
process.env['NODE_TLS_REJECT_UNAUTHORIZED'] = 0

/// This will be generated by the RFID reader for auth
let token;

// GET all entries
app.get('/', async (req, res) => {
    try {
        const data = await pool.query('SELECT * FROM monaco')
        res.status(200).send(data.rows)
    } catch (err) {
        console.log(err)
        res.sendStatus(500)
    }
})



//POST new entry
app.post('/', async (req, res) => {
    // From RFID Reader, data is returned as 
    // {
    //     "timestamp": "2021-06-15T14:53:23.000Z" <- Time stamp of when the car most recently crossed the line
    //     "data": {
    //        "idHex": "0000000000000000000000001", <- Car ID; only last digits are unique
    //        ... 
    //     },
    // }
    const response = req.body;
    try {

        // the key is the id of the car
        // the value is the time stamp it last crossed the line
        const responseData = {};

        if (Array.isArray(response)) {
            response.forEach(element => {
                const carId =
                    element.data.idHex;
                const timeStamp = element.timestamp;

                responseData[carId] = timeStamp

            });
            console.log(responseData)
        }
    } catch (e) {
        console.debug('Data does not match RFID response')
    }


    // const { name, lap_time, team_name } = req.body
    // try {
    //     await pool.query('INSERT INTO monaco (name, lap_time, team_name) VALUES ($1, $2, $3)', [name, lap_time, team_name])
    //     res.status(200).send({ message: "Successfully inserted entry into moncaco" })
    // } catch (err) {
    //     await pool.query('INSERT INTO monaco zebra, 0:00:000, zebra1')

    //     console.log(err)
    //     res.sendStatus(500)
    // }
})

//CREATE TABLE
app.get('/setup', async (req, res) => {
    try {
        await pool.query('CREATE TABLE monaco( id SERIAL PRIMARY KEY, name VARCHAR(100), lap_time VARCHAR(100), team_name VARCHAR(100))')

        res.status(200).send({ message: "Successfully created table" })
    } catch (err) {
        console.log(err)
        res.sendStatus(500)
    }
})


// Connect to RFID Reader
app.get('/start', async (req, res) => {
    try {
        await rfidGetToken();
        await rfidStart();
        res.status(200)
    } catch (e) {
        console.error(e)
        res.sendStatus(500)
    }
})

// Connect to RFID Reader
app.get('/stop', async (req, res) => {
    try {
        if (!token) {
            rfidGetToken();
        }

        rfidStop();
        console.log('Stopped RFID')
        res.status(200)
    } catch (e) {
        console.error(e)
        res.sendStatus(500)
    }

})

app.listen(port, () => console.log(`Server has started on port: ${port}`))


/**
 * Logs into RFID Reader with secure credentials and returns a token to be 
 * used for all future communications.
 * @returns void
 */
async function rfidGetToken() {
    const loginResponse = await fetch(`https://${rfidAddress}/cloud/localRestLogin`, {
        headers: {
            "Authorization": `Basic ${btoa(webUsername + ':' + webPassword)}`
        },
    });

    if (loginResponse.ok) {
        let json = await loginResponse.json();
        token = json.message;
        console.log('Token retrieved')
        return;
    }
    console.log('RFID Token retrieval error')
    throw loginResponse.statusText;
}

/**
 * Starts the RFID Reader sending HTTP POST requests.
 * @returns {void}
 */
async function rfidStart() {
    const startResponse = await fetch(`https://${rfidAddress}/cloud/start`, {
        method: "PUT",
        headers: {
            "Authorization": `Bearer ${token}`
        },
    });
    if (startResponse.ok) {
        console.log('RFID Started')
        return;
    }
    console.error('RFID Start error')
    throw startResponse.statusText;
}

/**
 * Stops the RFID reader from sending HTTP POST requests
 * @returns {void}
 */
async function rfidStop() {
    const stopResponse = await fetch(`https://${rfidAddress}/cloud/stop`, {
        method: "PUT",
        headers: {
            "Authorization": `Bearer ${token}`
        },
    });

    if (stopResponse.ok) {
        console.log('RFID Stopped')
        return;
    }
    console.error('RFID Stop error')
    throw stopResponse.statusText;
}
